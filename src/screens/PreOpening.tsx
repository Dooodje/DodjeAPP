import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, Animated, Image, Platform } from 'react-native';
import { router } from 'expo-router';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useAuth } from '../hooks/useAuth';
import { usePreloadCache, globalImageCache } from '../hooks/usePreloadCache';
import { usePreopeningContext } from '../contexts/PreopeningContext';
import { LogoDodje } from '../components/LogoDodje';
import { Section, Level } from '../types/home';
import { iapService } from '../services/iap';

// Constantes pour AsyncStorage (m√™mes que dans login.tsx)
const REMEMBER_ME_KEY = 'rememberMe';
const SAVED_CREDENTIALS_KEY = 'savedCredentials';

// Composant invisible pour pr√©-monter toutes les images en m√©moire
const ImagePreloader: React.FC<{ 
  shouldPreload: boolean;
}> = ({ shouldPreload }) => {
  if (!shouldPreload) return null;

  const ALL_SECTIONS: Section[] = ['Bourse', 'Crypto'];
  const ALL_LEVELS: Level[] = ['D√©butant', 'Avanc√©', 'Expert'];

  console.log('üñºÔ∏è Pr√©-montage des images en cours...');
  console.log('üìä Images disponibles dans globalImageCache:', globalImageCache.size);

  return (
    <View style={styles.imagePreloader}>
      {ALL_SECTIONS.map(section => 
        ALL_LEVELS.map(level => {
          const key = `${section}-${level}`;
          
          // Utiliser directement globalImageCache
          const imageData = globalImageCache.get(key);
          
          if (!imageData?.url || !imageData?.isLoaded) {
            console.log(`‚ö†Ô∏è Image ${key} non disponible pour pr√©-montage`);
            console.log(`üìä Donn√©es image ${key}:`, imageData);
            return null;
          }
          
          console.log(`‚úÖ Pr√©-montage de l'image ${key}: ${imageData.url.substring(0, 50)}...`);
          
          return (
            <Image
              key={key}
              source={{ uri: imageData.url }}
              style={styles.preloadedImage}
              resizeMode="contain"
              onLoad={() => console.log(`üéØ Image ${key} pr√©-mont√©e en m√©moire`)}
            />
          );
        })
      ).flat()}
    </View>
  );
};

export default function PreOpening() {
  const { user, isLoading: authLoading, login } = useAuth();
  const { markPreopeningComplete } = usePreopeningContext();
  const {
    isLoading,
    isComplete,
    progress,
    loadedDataCount,
    loadedImagesCount,
    totalItems,
    error,
    cacheStats
  } = usePreloadCache();

  // √âtat pour contr√¥ler le pr√©-montage
  const [shouldPreloadImages, setShouldPreloadImages] = useState(false);
  const [preloadingComplete, setPreloadingComplete] = useState(false);
  
  // √âtat pour l'initialisation IAP
  const [isIAPInitialized, setIsIAPInitialized] = useState(false);

  // √âtat pour contr√¥ler l'animation de zoom out
  const [shouldZoomOut, setShouldZoomOut] = useState(false);
  
  // √âtat pour contr√¥ler la visibilit√© du logo apr√®s l'animation
  const [isLogoVisible, setIsLogoVisible] = useState(true);

  // √âtats pour l'authentification automatique
  const [autoAuthAttempted, setAutoAuthAttempted] = useState(false);
  const [autoAuthInProgress, setAutoAuthInProgress] = useState(false);

  // √âtats pour les animations
  const [logoScale] = useState(new Animated.Value(0.8));
  const [progressOpacity] = useState(new Animated.Value(0));

  // Calculer le pourcentage de progression
  const progressPercentage = totalItems > 0 ? Math.round((progress / totalItems) * 100) : 0;

  // Authentification automatique au d√©marrage
  useEffect(() => {
    const attemptAutoLogin = async () => {
      if (autoAuthAttempted || user) return;
      
      try {
        setAutoAuthAttempted(true);
        console.log('üîê V√©rification des identifiants sauvegard√©s...');
        
        const rememberMeValue = await AsyncStorage.getItem(REMEMBER_ME_KEY);
        if (rememberMeValue === 'true') {
          const savedCredentials = await AsyncStorage.getItem(SAVED_CREDENTIALS_KEY);
          if (savedCredentials) {
            const { email, password } = JSON.parse(savedCredentials);
            console.log('‚úÖ Identifiants trouv√©s, tentative de connexion automatique...');
            
            setAutoAuthInProgress(true);
            await login(email, password);
            console.log('üéØ Connexion automatique r√©ussie !');
          } else {
            console.log('‚ö†Ô∏è Option "Rester connect√©" activ√©e mais aucun identifiant sauvegard√©');
          }
        } else {
          console.log('‚ÑπÔ∏è Aucune connexion automatique demand√©e');
        }
      } catch (error) {
        console.error('‚ùå Erreur lors de la connexion automatique:', error);
        // En cas d'erreur, supprimer les identifiants sauvegard√©s
        await AsyncStorage.removeItem(REMEMBER_ME_KEY);
        await AsyncStorage.removeItem(SAVED_CREDENTIALS_KEY);
      } finally {
        setAutoAuthInProgress(false);
      }
    };

    attemptAutoLogin();
  }, [user, login, autoAuthAttempted]);

  // Initialiser le service IAP en parall√®le
  useEffect(() => {
    const initializeIAP = async () => {
      if (Platform.OS === 'android' || Platform.OS === 'ios') {
        try {
          await iapService.initialize();
          console.log('Service IAP initialis√© avec succ√®s');
        } catch (error) {
          console.error('Erreur lors de l\'initialisation du service IAP:', error);
        }
      }
      // Dans tous les cas, marquer comme initialis√© pour ne pas bloquer l'application
      setIsIAPInitialized(true);
    };

    initializeIAP();
  }, []);

  // D√©marrer les animations au montage
  useEffect(() => {
    // Animation du logo
    Animated.timing(logoScale, {
      toValue: 1,
      duration: 1000,
      useNativeDriver: true,
    }).start();

    // Animation de la barre de progression (apr√®s un d√©lai)
    setTimeout(() => {
      Animated.timing(progressOpacity, {
        toValue: 1,
        duration: 500,
        useNativeDriver: true,
      }).start();
    }, 500);
  }, []);

  // D√©marrer le pr√©-montage des images quand le chargement est presque termin√©
  useEffect(() => {
    if (isComplete && cacheStats.imagesCached >= 6 && !shouldPreloadImages) {
      console.log('üöÄ D√©marrage du pr√©-montage des images...');
      setShouldPreloadImages(true);
      
      // Attendre un peu que le pr√©-montage se fasse
      setTimeout(() => {
        console.log('‚úÖ Pr√©-montage des images termin√©');
        setPreloadingComplete(true);
      }, 1000); // 1 seconde pour que toutes les images soient pr√©-mont√©es
    }
  }, [isComplete, cacheStats.imagesCached, shouldPreloadImages]);

  // D√©marrer l'animation de zoom out quand tous les chargements sont termin√©s
  useEffect(() => {
    if (isComplete && !authLoading && !autoAuthInProgress && autoAuthAttempted && preloadingComplete && isIAPInitialized && !shouldZoomOut) {
      console.log('‚úÖ Tous les chargements termin√©s, d√©marrage du zoom out du logo');
      setShouldZoomOut(true);
      
      // Animation de zoom out rapide et au maximum
      Animated.timing(logoScale, {
        toValue: 0, // Zoom out au maximum pour faire dispara√Ætre le logo
        duration: 300, // Animation rapide (300ms)
        useNativeDriver: true,
      }).start(() => {
        // Masquer d√©finitivement le logo pour √©viter qu'il r√©apparaisse
        setIsLogoVisible(false);
        
        // IMPORTANT: Marquer le preopening comme termin√© AVANT la navigation
        // Cela d√©clenchera la cr√©ation des listeners Firestore
        markPreopeningComplete();
        
        // Navigation conditionnelle selon l'√©tat de l'utilisateur
        if (user) {
          // Utilisateur connect√© -> aller vers l'application
          console.log('üéØ Utilisateur connect√©, navigation vers /(tabs)');
          router.replace('/(tabs)');
        } else {
          // Aucun utilisateur connect√© -> retour √† l'opening
          console.log('üîÑ Aucun utilisateur connect√©, redirection vers /opening');
          router.replace('/opening');
        }
      });
    }
  }, [isComplete, authLoading, autoAuthInProgress, autoAuthAttempted, preloadingComplete, isIAPInitialized, shouldZoomOut, markPreopeningComplete, user]);

  // Fonction pour obtenir le texte de chargement appropri√©
  const getLoadingText = () => {
    if (autoAuthInProgress) {
      return "Connexion automatique...";
    }
    
    if (authLoading) {
      return "Authentification...";
    }
    
    if (!user && !autoAuthAttempted) {
      return "V√©rification des identifiants...";
    }
    
    if (!user && autoAuthAttempted) {
      return "Chargement des donn√©es...";
    }
    
    if (isLoading) {
      return "Chargement des donn√©es utilisateur...";
    }
    
    if (isComplete && shouldPreloadImages && !preloadingComplete) {
      return "Pr√©-montage des images...";
    }
    
    if (isComplete && preloadingComplete && !user) {
      return "Redirection vers l'accueil...";
    }
    
    if (isComplete && preloadingComplete && user) {
      return "Chargement termin√© !";
    }
    
    return "Initialisation...";
  };

  // Totaux pour l'affichage (6 combinaisons section/niveau)
  const totalStaticData = 6;
  const totalImages = 6;

  return (
    <View style={styles.container}>
      {/* Pr√©-montage invisible de toutes les images pour les garder en m√©moire */}
      <ImagePreloader shouldPreload={shouldPreloadImages} />
      
      {/* Logo centr√© - seulement visible si isLogoVisible est true */}
      {isLogoVisible && (
        <Animated.View style={[styles.logoContainer, { transform: [{ scale: logoScale }] }]}>
          <LogoDodje width={225} height={225} />
        </Animated.View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0A0400',
    justifyContent: 'center',
    alignItems: 'center',
  },
  logoContainer: {
    // Pas de margin, le logo est parfaitement centr√©
  },
  imagePreloader: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    flexDirection: 'row',
    flexWrap: 'wrap',
    opacity: 0,
    zIndex: -1,
  },
  preloadedImage: {
    width: '50%',
    height: '50%',
  },
}); 