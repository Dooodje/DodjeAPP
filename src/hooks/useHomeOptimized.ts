import { useState, useCallback, useEffect, useMemo } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Image, Dimensions } from 'react-native';
import { RootState } from '../store';
import { router } from 'expo-router';
import {
  setCurrentSection,
  setCurrentLevel
} from '../store/slices/homeSlice';
import { useAuth } from './useAuth';
import { usePreopeningContext } from '../contexts/PreopeningContext';
import { Section, Level } from '../types/home';
import { useUserStats } from './queries/useHomeQueries';
import { homeService } from '../services/home';
import { VideoStatusService } from '../services/businessLogic/VideoStatusService';
import { UserVideo } from '../types/video';
import { 
  globalStaticDataCache, 
  globalImageCache as preloadGlobalImageCache,
  pendingUserDataKeys,
  isDataPreloaded,
  getPreloadedData,
  getPreloadedImageInfo
} from './usePreloadCache';

const { width: screenWidth, height: screenHeight } = Dimensions.get('window');
const REFERENCE_WIDTH = 550;

// Constantes pour toutes les sections et niveaux
const ALL_SECTIONS: Section[] = ['Bourse', 'Crypto'];
const ALL_LEVELS: Level[] = ['D√©butant', 'Avanc√©', 'Expert'];

// Type pour les donn√©es mises en cache
interface CachedData {
  imageUrl: string;
  positions: Record<string, { x: number; y: number; order?: number; isAnnex: boolean }>;
  parcours?: Record<string, any>;
  isStaticOnly?: boolean;
  needsUserData?: boolean;
}

// Type pour le cache d'images avec dimensions
interface ImageCacheEntry {
  url: string;
  isLoaded: boolean;
  isLoading: boolean;
  error?: string;
  dimensions?: {
    width: number;
    height: number;
    finalWidth: number;
    finalHeight: number;
  };
}

// Cache global d'images pour √©viter les rechargements (utilise le cache partag√©)
// const globalImageCache = preloadGlobalImageCache;

/**
 * Version optimis√©e du hook useHome utilisant un cache local pour √©viter les rechargements
 * lors de la navigation entre sections et niveaux
 * Utilise maintenant les donn√©es pr√©charg√©es par usePreloadCache et compl√®te seulement ce qui manque
 */
export function useHomeOptimized() {
  const dispatch = useDispatch();
  const { user, isLoading: authLoading } = useAuth();
  const { isPreopeningComplete } = usePreopeningContext();
  
  // √âtat Redux pour la section et le niveau actuels
  const { currentSection, currentLevel } = useSelector((state: RootState) => state.home);
  
  // √âtats locaux pour la gestion des modales
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [modalData, setModalData] = useState<any>(null);

  // Cache local pour toutes les combinaisons de donn√©es (enrichi avec les donn√©es utilisateur)
  const [dataCache, setDataCache] = useState<Map<string, CachedData>>(new Map());
  const [unsubscribeFunctions, setUnsubscribeFunctions] = useState<Map<string, () => void>>(new Map());
  const [isInitialLoading, setIsInitialLoading] = useState(true);
  const [loadedCount, setLoadedCount] = useState(0);

  // Cache pour les images de fond (utilise le cache global partag√©)
  const [imageCache, setImageCache] = useState<Map<string, ImageCacheEntry>>(preloadGlobalImageCache);
  const [imagesLoadedCount, setImagesLoadedCount] = useState(0);
  const [isImagesLoading, setIsImagesLoading] = useState(true);

  // Utiliser seulement le hook des statistiques utilisateur (pas de rechargement)
  const { 
    data: userStats, 
    isLoading: userStatsLoading, 
    error: userStatsError 
  } = useUserStats(user?.uid);

  // Fonction pour obtenir la cl√© de cache
  const getCacheKey = useCallback((section: Section, level: Level) => {
    return `${section}-${level}`;
  }, []);

  // Fonction pour calculer les dimensions finales d'une image
  const calculateImageDimensions = useCallback((originalWidth: number, originalHeight: number) => {
    let finalWidth, finalHeight;
    
    if (screenWidth > REFERENCE_WIDTH) {
      // Pour les √©crans plus larges que la r√©f√©rence
      finalWidth = REFERENCE_WIDTH;
      finalHeight = (originalHeight * REFERENCE_WIDTH) / originalWidth;
    } else {
      // Pour les √©crans plus petits que la r√©f√©rence
      finalWidth = screenWidth;
      finalHeight = (originalHeight * screenWidth) / originalWidth;
    }
    
    return { finalWidth, finalHeight };
  }, []);

  // Fonction pour pr√©charger une image avec dimensions (mise √† jour pour utiliser le cache partag√©)
  const preloadImageWithDimensions = useCallback((url: string, key: string) => {
    if (!url || url.trim() === '') {
      console.log(`‚ö†Ô∏è URL d'image vide pour ${key}`);
      return;
    }

    // V√©rifier si l'image est d√©j√† en cache global partag√©
    const existingEntry = preloadGlobalImageCache.get(key);
    if (existingEntry && existingEntry.isLoaded) {
      console.log(`üì¶ Image d√©j√† en cache partag√©: ${key}`);
      setImagesLoadedCount(prevCount => {
        const newCount = prevCount + 1;
        if (newCount >= ALL_SECTIONS.length * ALL_LEVELS.length) {
          setIsImagesLoading(false);
          console.log('üéâ Toutes les images de fond sont pr√©charg√©es');
        }
        return newCount;
      });
      return;
    }

    // Si l'image n'est pas en cache, la pr√©charger
    const loadingEntry: ImageCacheEntry = {
      url,
      isLoaded: false,
      isLoading: true
    };
    
    preloadGlobalImageCache.set(key, loadingEntry);
    setImageCache(new Map(preloadGlobalImageCache));

    // Obtenir les dimensions de l'image
    Image.getSize(
      url,
      (width, height) => {
        const { finalWidth, finalHeight } = calculateImageDimensions(width, height);
        
        // Pr√©charger l'image avec Image.prefetch
        Image.prefetch(url)
          .then(() => {
            console.log(`‚úÖ Image pr√©charg√©e avec succ√®s: ${key} (${finalWidth}x${finalHeight})`);
            
            const successEntry: ImageCacheEntry = {
              url,
              isLoaded: true,
              isLoading: false,
              dimensions: {
                width,
                height,
                finalWidth,
                finalHeight
              }
            };
            
            preloadGlobalImageCache.set(key, successEntry);
            setImageCache(new Map(preloadGlobalImageCache));

            setImagesLoadedCount(prevCount => {
              const newCount = prevCount + 1;
              if (newCount >= ALL_SECTIONS.length * ALL_LEVELS.length) {
                setIsImagesLoading(false);
                console.log('üéâ Toutes les images de fond sont pr√©charg√©es');
              }
              return newCount;
            });
          })
          .catch((error) => {
            console.error(`‚ùå Erreur lors du pr√©chargement de l'image ${key}:`, error);
            
            const errorEntry: ImageCacheEntry = {
              url,
              isLoaded: false,
              isLoading: false,
              error: 'Erreur de chargement'
            };
            
            preloadGlobalImageCache.set(key, errorEntry);
            setImageCache(new Map(preloadGlobalImageCache));

            setImagesLoadedCount(prevCount => {
              const newCount = prevCount + 1;
              if (newCount >= ALL_SECTIONS.length * ALL_LEVELS.length) {
                setIsImagesLoading(false);
                console.log('üéâ Pr√©chargement des images termin√© (avec erreurs)');
              }
              return newCount;
            });
          });
      },
      (error) => {
        console.error(`‚ùå Erreur lors de l'obtention des dimensions de l'image ${key}:`, error);
        
        const errorEntry: ImageCacheEntry = {
          url,
          isLoaded: false,
          isLoading: false,
          error: 'Erreur de dimensions'
        };
        
        preloadGlobalImageCache.set(key, errorEntry);
        setImageCache(new Map(preloadGlobalImageCache));

        setImagesLoadedCount(prevCount => {
          const newCount = prevCount + 1;
          if (newCount >= ALL_SECTIONS.length * ALL_LEVELS.length) {
            setIsImagesLoading(false);
            console.log('üéâ Pr√©chargement des images termin√© (avec erreurs)');
          }
          return newCount;
        });
      }
    );
  }, [calculateImageDimensions]);

  // Obtenir les donn√©es actuelles depuis le cache
  const currentData = useMemo(() => {
    const key = getCacheKey(currentSection, currentLevel);
    const data = dataCache.get(key);
    
    // Si on a des donn√©es, ajouter l'image mise en cache
    if (data) {
      const imageEntry = imageCache.get(key);
      return {
        ...data,
        imageUrl: imageEntry?.url || data.imageUrl,
        isImageLoaded: imageEntry?.isLoaded || false,
        imageDimensions: imageEntry?.dimensions
      };
    }
    
    return data;
  }, [dataCache, imageCache, currentSection, currentLevel, getCacheKey]);

  // Fonction pour obtenir les informations d'image en cache
  const getImageInfo = useCallback((section: Section, level: Level) => {
    const key = getCacheKey(section, level);
    return imageCache.get(key);
  }, [imageCache, getCacheKey]);

  // Fonction pour obtenir toutes les donn√©es d'images pour le pr√©-montage
  const getAllImagesData = useCallback(() => {
    const allImages = new Map<string, {
      url: string;
      dimensions?: {
        width: number;
        height: number;
        finalWidth: number;
        finalHeight: number;
      };
      isLoaded: boolean;
    }>();

    // Parcourir toutes les combinaisons section/niveau
    for (const section of ALL_SECTIONS) {
      for (const level of ALL_LEVELS) {
        const key = `${section}-${level}`;
        const imageEntry = preloadGlobalImageCache.get(key);
        
        // Retourner les images si elles sont disponibles et charg√©es, m√™me sans dataEntry
        if (imageEntry?.url && imageEntry?.isLoaded) {
          allImages.set(key, {
            url: imageEntry.url,
            dimensions: imageEntry.dimensions,
            isLoaded: imageEntry.isLoaded,
          });
        }
      }
    }

    return allImages;
  }, []);

  // Initialiser le cache en utilisant les donn√©es pr√©charg√©es et en compl√©tant ce qui manque
  useEffect(() => {
    // CONDITION PRINCIPALE: Attendre que le preopening soit compl√®tement termin√©
    if (!isPreopeningComplete) {
      console.log('‚è≥ useHomeOptimized: En attente de la fin du preopening avant de cr√©er les listeners...');
      return;
    }

    // Attendre que l'authentification soit compl√®tement termin√©e
    if (authLoading) {
      console.log('üîê useHomeOptimized: Authentification en cours, attente avant initialisation des listeners...');
      return;
    }

    console.log('üöÄ useHomeOptimized: Preopening termin√© et authentification compl√®te - Initialisation du cache optimis√© avec donn√©es pr√©charg√©es...');
    console.log(`üë§ √âtat utilisateur: ${user ? `connect√© (${user.uid})` : 'non connect√©'}`);
    
    setIsInitialLoading(true);
    setIsImagesLoading(true);
    setLoadedCount(0);
    
    // Analyser l'√©tat du cache pr√©charg√©
    let preloadedDataCount = 0;
    let preloadedImagesCount = 0;
    let missingDataKeys: string[] = [];
    
    ALL_SECTIONS.forEach(section => {
      ALL_LEVELS.forEach(level => {
        const key = getCacheKey(section, level);
        
        // V√©rifier les donn√©es pr√©charg√©es
        const preloadedData = globalStaticDataCache.get(key);
        if (preloadedData) {
          preloadedDataCount++;
          console.log(`üì¶ Donn√©es d√©j√† pr√©charg√©es pour ${section} - ${level} (statique: ${preloadedData.isStaticOnly})`);
        } else {
          missingDataKeys.push(key);
          console.log(`‚ùå Donn√©es manquantes pour ${section} - ${level}`);
        }
        
        // V√©rifier les images pr√©charg√©es
        const preloadedImage = preloadGlobalImageCache.get(key);
        if (preloadedImage && preloadedImage.isLoaded) {
          preloadedImagesCount++;
          console.log(`üñºÔ∏è Image d√©j√† pr√©charg√©e pour ${section} - ${level}`);
        }
      });
    });
    
    console.log(`üìä √âtat du pr√©chargement: ${preloadedDataCount}/${ALL_SECTIONS.length * ALL_LEVELS.length} donn√©es, ${preloadedImagesCount}/${ALL_SECTIONS.length * ALL_LEVELS.length} images`);
    console.log(`üîÑ Donn√©es en attente de completion utilisateur: ${pendingUserDataKeys.size}`);
    console.log(`‚ùå Donn√©es compl√®tement manquantes: ${missingDataKeys.length}`);
    
    // Copier toutes les donn√©es pr√©charg√©es dans le cache local
    const newDataCache = new Map<string, CachedData>();
    ALL_SECTIONS.forEach(section => {
      ALL_LEVELS.forEach(level => {
        const key = getCacheKey(section, level);
        const preloadedData = globalStaticDataCache.get(key);
        if (preloadedData) {
          newDataCache.set(key, preloadedData);
        }
      });
    });
    
    setDataCache(newDataCache);
    setLoadedCount(preloadedDataCount);
    
    // Mettre √† jour le cache d'images
    setImageCache(new Map(preloadGlobalImageCache));
    setImagesLoadedCount(preloadedImagesCount);
    
    if (preloadedImagesCount >= ALL_SECTIONS.length * ALL_LEVELS.length) {
      setIsImagesLoading(false);
      console.log('üéâ Toutes les images √©taient d√©j√† pr√©charg√©es');
    }

    // Si toutes les donn√©es sont pr√©charg√©es, on peut d√©j√† afficher l'interface
    if (preloadedDataCount >= ALL_SECTIONS.length * ALL_LEVELS.length) {
      console.log('üéâ Toutes les donn√©es statiques sont disponibles, interface pr√™te');
      setIsInitialLoading(false);
    }

    // Si pas d'utilisateur connect√©, on s'arr√™te ici avec les donn√©es statiques
    if (!user?.uid) {
      console.log('üë§ Pas d\'utilisateur connect√©, utilisation des donn√©es statiques uniquement');
      return;
    }

    // IMPORTANT: Cr√©er des listeners seulement si l'authentification est compl√®te
    console.log('üîê Authentification compl√®te, cr√©ation des listeners Firestore...');

    // Cr√©er des listeners seulement pour ce qui manque vraiment (avec utilisateur connect√©)
    const newUnsubscribeFunctions = new Map<string, () => void>();
    const videoUnsubscribeFunctions = new Map<string, () => void>();
    let listenersCreated = 0;

    // 1. Cr√©er des listeners pour les donn√©es compl√®tement manquantes
    missingDataKeys.forEach(key => {
      const [section, level] = key.split('-') as [Section, Level];
      console.log(`‚ö° Cr√©ation d'un listener pour ${section} - ${level} (donn√©es compl√®tement manquantes)`);
      
      try {
        const unsubscribe = homeService.observeHomeDesignWithParcours(
          section,
          level,
          user.uid,
          (data: CachedData) => {
            console.log(`‚úÖ Donn√©es compl√®tes charg√©es pour ${section} - ${level} (√©tait manquant)`);
            
            // Enrichir les donn√©es avec les informations de vid√©os
            const enrichedData = { ...data, isStaticOnly: false, needsUserData: false };
            
            if (enrichedData.parcours) {
              // Observer les vid√©os pour chaque parcours
              Object.keys(enrichedData.parcours).forEach(parcoursKey => {
                const parcours = enrichedData.parcours![parcoursKey];
                if (parcours && parcours.id) {
                  const videoKey = `${key}-${parcours.id}`;
                  
                  if (videoUnsubscribeFunctions.has(videoKey)) {
                    videoUnsubscribeFunctions.get(videoKey)!();
                  }
                  
                  try {
                    const videoUnsubscribe = VideoStatusService.observeUserVideosInParcours(
                      user.uid,
                      parcours.id,
                      (videos: UserVideo[]) => {
                        const completedVideos = videos.filter(v => v.completionStatus === 'completed').length;
                        
                        setDataCache(prevCache => {
                          const newCache = new Map(prevCache);
                          const currentData = newCache.get(key);
                          if (currentData && currentData.parcours && currentData.parcours[parcoursKey]) {
                            const updatedData = {
                              ...currentData,
                              parcours: {
                                ...currentData.parcours,
                                [parcoursKey]: {
                                  ...currentData.parcours[parcoursKey],
                                  completedVideos,
                                  totalVideos: videos.length
                                }
                              }
                            };
                            newCache.set(key, updatedData);
                          }
                          return newCache;
                        });
                      }
                    );
                    
                    videoUnsubscribeFunctions.set(videoKey, videoUnsubscribe);
                  } catch (videoError) {
                    console.error(`Erreur lors de l'observation des vid√©os pour ${parcours.id}:`, videoError);
                  }
                }
              });
            }
            
            setDataCache(prevCache => {
              const newCache = new Map(prevCache);
              newCache.set(key, enrichedData);
              return newCache;
            });

            if (enrichedData.imageUrl) {
              const currentImageEntry = preloadGlobalImageCache.get(key);
              if (!currentImageEntry || currentImageEntry.url !== enrichedData.imageUrl) {
                console.log(`üñºÔ∏è Pr√©chargement de l'image pour ${section} - ${level} (√©tait manquante)`);
                preloadImageWithDimensions(enrichedData.imageUrl, key);
              }
            }

            setLoadedCount(prevCount => {
              const newCount = prevCount + 1;
              if (newCount >= ALL_SECTIONS.length * ALL_LEVELS.length) {
                setIsInitialLoading(false);
                console.log('üéâ Cache des donn√©es initialis√© (avec donn√©es manquantes charg√©es)');
              }
              return newCount;
            });
          }
        );

        newUnsubscribeFunctions.set(key, unsubscribe);
        listenersCreated++;
      } catch (error) {
        console.error(`‚ùå Erreur lors de l'initialisation du cache pour ${key}:`, error);
      }
    });

    // 2. NOUVEAU: Cr√©er des listeners pour TOUTES les donn√©es pr√©charg√©es pour assurer les mises √† jour temps r√©el
    let userDataListenersCreated = 0;
    if (user?.uid) {
      ALL_SECTIONS.forEach(section => {
        ALL_LEVELS.forEach(level => {
          const key = getCacheKey(section, level);
          const preloadedData = globalStaticDataCache.get(key);
          
          // Cr√©er un listener pour TOUTES les donn√©es pr√©charg√©es (pas seulement celles qui ont besoin de donn√©es utilisateur)
          if (preloadedData) {
            console.log(`üîÑ Cr√©ation d'un listener temps r√©el pour ${section} - ${level} (donn√©es pr√©charg√©es)`);
            
            try {
              const unsubscribe = homeService.observeHomeDesignWithParcours(
                section,
                level,
                user.uid,
                (data: CachedData) => {
                  console.log(`üîÑ Mise √† jour temps r√©el pour ${section} - ${level}`);
                  
                  // Enrichir les donn√©es avec les informations de vid√©os
                  const enrichedData = { 
                    ...data, 
                    isStaticOnly: false, 
                    needsUserData: false 
                  };
                  
                  if (enrichedData.parcours) {
                    // Observer les vid√©os pour chaque parcours
                    Object.keys(enrichedData.parcours).forEach(parcoursKey => {
                      const parcours = enrichedData.parcours![parcoursKey];
                      if (parcours && parcours.id) {
                        const videoKey = `${key}-${parcours.id}`;
                        
                        if (videoUnsubscribeFunctions.has(videoKey)) {
                          videoUnsubscribeFunctions.get(videoKey)!();
                        }
                        
                        try {
                          const videoUnsubscribe = VideoStatusService.observeUserVideosInParcours(
                            user.uid,
                            parcours.id,
                            (videos: UserVideo[]) => {
                              const completedVideos = videos.filter(v => v.completionStatus === 'completed').length;
                              
                              setDataCache(prevCache => {
                                const newCache = new Map(prevCache);
                                const currentData = newCache.get(key);
                                if (currentData && currentData.parcours && currentData.parcours[parcoursKey]) {
                                  const updatedData = {
                                    ...currentData,
                                    parcours: {
                                      ...currentData.parcours,
                                      [parcoursKey]: {
                                        ...currentData.parcours[parcoursKey],
                                        completedVideos,
                                        totalVideos: videos.length
                                      }
                                    }
                                  };
                                  newCache.set(key, updatedData);
                                  
                                  // Mettre √† jour aussi le cache global
                                  globalStaticDataCache.set(key, updatedData);
                                }
                                return newCache;
                              });
                            }
                          );
                          
                          videoUnsubscribeFunctions.set(videoKey, videoUnsubscribe);
                        } catch (videoError) {
                          console.error(`Erreur lors de l'observation des vid√©os pour ${parcours.id}:`, videoError);
                        }
                      }
                    });
                  }
                  
                  // Mettre √† jour le cache local
                  setDataCache(prevCache => {
                    const newCache = new Map(prevCache);
                    newCache.set(key, enrichedData);
                    return newCache;
                  });
                  
                  // Mettre √† jour aussi le cache global pour les autres composants
                  globalStaticDataCache.set(key, enrichedData);
                  
                  // Retirer cette cl√© des donn√©es en attente
                  pendingUserDataKeys.delete(key);
                  
                  console.log(`üéØ useHomeOptimized: ${pendingUserDataKeys.size} combinaisons restantes √† compl√©ter`);
                }
              );

              newUnsubscribeFunctions.set(`realtime-${key}`, unsubscribe);
              userDataListenersCreated++;
            } catch (error) {
              console.error(`‚ùå Erreur lors de l'initialisation des listeners temps r√©el pour ${key}:`, error);
            }
          }
        });
      });
    }

    // Stocker les fonctions de d√©sabonnement
    setUnsubscribeFunctions(newUnsubscribeFunctions);

    console.log(`üìä R√©sum√©: ${listenersCreated} listeners cr√©√©s pour les donn√©es manquantes`);
    console.log(`üîÑ ${userDataListenersCreated} listeners temps r√©el cr√©√©s pour les donn√©es pr√©charg√©es`);
    console.log(`‚è≥ En attente de completion: ${pendingUserDataKeys.size} combinaisons`);

    // Fonction de nettoyage
    return () => {
      console.log('üßπ Nettoyage du cache et des listeners');
      newUnsubscribeFunctions.forEach((unsubscribe, key) => {
        try {
          unsubscribe();
        } catch (error) {
          console.error(`Erreur lors du nettoyage du listener ${key}:`, error);
        }
      });
      
      videoUnsubscribeFunctions.forEach((unsubscribe, key) => {
        try {
          unsubscribe();
        } catch (error) {
          console.error(`Erreur lors du nettoyage du listener vid√©o ${key}:`, error);
        }
      });
    };
  }, [user?.uid, getCacheKey, preloadImageWithDimensions, authLoading, isPreopeningComplete]); // Ajout de isPreopeningComplete

  // Calculer l'√©tat de chargement global (donn√©es + images)
  const isLoading = userStatsLoading || isInitialLoading || isImagesLoading;
  
  // Calculer l'erreur globale
  const error = userStatsError?.message || null;

  // Extraire les statistiques utilisateur
  const streak = userStats?.streak || 0;
  const dodji = userStats?.dodji || 0;

  // Fonction pour changer de section (navigation instantan√©e)
  const changeSection = useCallback((section: Section) => {
    console.log(`üîÑ Navigation instantan√©e vers section: ${section}`);
    dispatch(setCurrentSection(section));
  }, [dispatch]);

  // Fonction pour changer de niveau (navigation instantan√©e)
  const changeLevel = useCallback((level: Level) => {
    console.log(`üîÑ Navigation instantan√©e vers niveau: ${level}`);
    dispatch(setCurrentLevel(level));
  }, [dispatch]);

  // Fonction pour g√©rer les clics sur les positions
  const handlePositionPress = useCallback((positionId: string, order?: number) => {
    console.log(`üéØ Clic sur position: ${positionId}, ordre: ${order}`);
    
    if (order !== undefined && currentData?.parcours) {
      const orderStr = order.toString();
      const parcours = currentData.parcours[orderStr];
      
      if (parcours && parcours.id) {
        console.log(`üöÄ Navigation vers le parcours: ${parcours.id}`);
        router.push(`/course/${parcours.id}`);
      } else {
        console.warn(`‚ö†Ô∏è Aucun parcours trouv√© pour l'ordre: ${order}`);
      }
    } else {
      console.warn(`‚ö†Ô∏è Ordre non d√©fini ou donn√©es de parcours manquantes`);
    }
  }, [currentData]);

  // Fonction pour r√©cup√©rer les donn√©es de l'arbre (pour compatibilit√©)
  const fetchTreeData = useCallback(() => {
    console.log('üîÑ Donn√©es d√©j√† en cache - pas de rechargement n√©cessaire');
  }, []);

  // Fonction pour pr√©charger les donn√©es (pour compatibilit√©)
  const prefetchNextLevelData = useCallback((level: Level, section: Section) => {
    const key = getCacheKey(section, level);
    const cachedData = dataCache.get(key);
    const cachedImage = imageCache.get(key);
    
    if (cachedData && cachedImage?.isLoaded) {
      console.log(`üì¶ Donn√©es et image d√©j√† en cache pour ${section} - ${level}`);
    } else {
      console.log(`üì¶ Donn√©es/image en cours de chargement pour ${section} - ${level}`);
    }
  }, [dataCache, imageCache, getCacheKey]);

  // Log des changements de navigation (sans rechargement)
  useEffect(() => {
    if (currentData) {
      const imageEntry = imageCache.get(getCacheKey(currentSection, currentLevel));
      console.log('üè† Navigation vers:', {
        section: currentSection,
        level: currentLevel,
        imageUrl: currentData.imageUrl ? 'Pr√©sente' : 'Absente',
        imageLoaded: imageEntry?.isLoaded ? 'Charg√©e' : 'En cours',
        imageDimensions: imageEntry?.dimensions ? `${imageEntry.dimensions.finalWidth}x${imageEntry.dimensions.finalHeight}` : 'Non calcul√©es',
        positionsCount: Object.keys(currentData.positions || {}).length,
        parcoursCount: Object.keys(currentData.parcours || {}).length,
        isStaticOnly: currentData.isStaticOnly ? 'Donn√©es statiques' : 'Donn√©es compl√®tes',
        source: 'Cache local optimis√©'
      });
    }
  }, [currentSection, currentLevel, currentData, imageCache, getCacheKey]);

  // Log du statut du cache
  useEffect(() => {
    const preloadedDataCount = globalStaticDataCache.size;
    const preloadedImagesCount = Array.from(preloadGlobalImageCache.values()).filter(img => img.isLoaded).length;
    
    console.log(`üìä Cache optimis√©: ${dataCache.size}/${ALL_SECTIONS.length * ALL_LEVELS.length} donn√©es charg√©es`);
    console.log(`üñºÔ∏è Images: ${imagesLoadedCount}/${ALL_SECTIONS.length * ALL_LEVELS.length} images pr√©charg√©es`);
    console.log(`üì¶ Pr√©chargement: ${preloadedDataCount} donn√©es statiques, ${preloadedImagesCount} images pr√©charg√©es`);
    console.log(`‚è≥ En attente de completion: ${pendingUserDataKeys.size} combinaisons`);
  }, [dataCache.size, imagesLoadedCount]);

  return {
    // √âtats principaux (donn√©es depuis le cache)
    currentSection,
    currentLevel,
    homeDesign: currentData,
    isLoading,
    error,
    
    // Statistiques utilisateur
    streak,
    dodji,
    
    // Fonctions de navigation (instantan√©es)
    changeSection,
    changeLevel,
    handlePositionPress,
    
    // Fonctions utilitaires
    fetchTreeData,
    prefetchNextLevelData,
    getImageInfo,
    getAllImagesData,
    
    // Gestion des modales
    isModalVisible,
    setIsModalVisible,
    modalData,
    setModalData,
    
    // Informations de cache
    isPreloading: isInitialLoading || isImagesLoading,
    preloadedCount: dataCache.size,
    imagesLoadedCount,
    totalImages: ALL_SECTIONS.length * ALL_LEVELS.length,
    
    // Donn√©es pour le pr√©-montage des images
    allImagesData: getAllImagesData(),
    
    // Cache d'images pour d√©bogage
    imageCache: imageCache
  };
} 