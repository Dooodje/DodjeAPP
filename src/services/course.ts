import { doc, getDoc, updateDoc, setDoc, collection, query, where, getDocs, onSnapshot, documentId } from 'firebase/firestore';
import { db } from './firebase';
import { Course, CourseContent, CourseProgress } from '../types/course';

// Cache pour les donn√©es de parcours
const parcoursCache = new Map<string, { data: ParcoursData; timestamp: number }>();
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

// Interface pour les donn√©es de parcours
interface ParcoursData {
  id: string;
  title?: string;
  titre?: string;
  description?: string;
  videoIds?: string[];
  videos?: Array<{
    id: string;
    title?: string;
    titre?: string;
    duration?: number;
    duree?: number;
    order?: number;
    ordre?: number;
  }>;
  design?: {
    id?: string;
    backgroundImageUrl?: string;
    imageUrl?: string;
    positions?: Record<string, { x: number; y: number; order?: number; isAnnex: boolean; isQuiz?: boolean }>;
  };
  designId?: string;
  thumbnail?: string;
  thumbnailUrl?: string;
  error?: string;
  [key: string]: any;
}

class CourseService {
  async getCourse(courseId: string): Promise<Course> {
    try {
      const courseDoc = await getDoc(doc(db, 'courses', courseId));
      if (!courseDoc.exists()) {
        throw new Error('Parcours non trouv√©');
      }

      return courseDoc.data() as Course;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration du parcours:', error);
      throw error;
    }
  }

  // M√©thode optimis√©e pour r√©cup√©rer les vid√©os en batch
  private async fetchVideosInBatch(videoIds: string[]): Promise<Array<any>> {
    if (!videoIds.length) return [];
    
    try {
      console.log(`üöÄ CourseService: R√©cup√©ration optimis√©e de ${videoIds.length} vid√©os en batch`);
      
      // Diviser en chunks de 10 (limite Firestore pour les requ√™tes 'in')
      const chunks = [];
      for (let i = 0; i < videoIds.length; i += 10) {
        chunks.push(videoIds.slice(i, i + 10));
      }
      
      const allVideos: Array<any> = [];
      
      // R√©cup√©rer chaque chunk en parall√®le
      const chunkPromises = chunks.map(async (chunk) => {
        const videosQuery = query(
          collection(db, 'videos'),
          where(documentId(), 'in', chunk)
        );
        const snapshot = await getDocs(videosQuery);
        return snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));
      });
      
      const chunkResults = await Promise.all(chunkPromises);
      chunkResults.forEach(videos => allVideos.push(...videos));
      
      // Trier par ordre
      allVideos.sort((a, b) => {
        const orderA = a.order || a.ordre || 0;
        const orderB = b.order || b.ordre || 0;
        return orderA - orderB;
      });
      
      console.log(`‚úÖ CourseService: ${allVideos.length} vid√©os r√©cup√©r√©es et tri√©es en batch`);
      return allVideos;
    } catch (error) {
      console.error('‚ùå CourseService: Erreur lors de la r√©cup√©ration des vid√©os en batch:', error);
      return [];
    }
  }

  async getCourseById(courseId: string): Promise<ParcoursData | null> {
    try {
      // V√©rifier le cache d'abord
      const cached = parcoursCache.get(courseId);
      if (cached && (Date.now() - cached.timestamp) < CACHE_DURATION) {
        console.log('üì¶ CourseService: Utilisation du cache pour le parcours', courseId);
        return cached.data;
      }

      console.log(`üîç CourseService: R√©cup√©ration du parcours ID=${courseId} depuis Firestore`);
      const courseDoc = await getDoc(doc(db, 'parcours', courseId));
      
      if (!courseDoc.exists()) {
        console.warn(`‚ö†Ô∏è CourseService: Parcours ID=${courseId} non trouv√©`);
        return null;
      }

      // R√©cup√©rer les donn√©es brutes
      const rawData = courseDoc.data();
      
      // Cr√©er l'objet ParcoursData
      const courseData: ParcoursData = {
        id: courseDoc.id,
        ...rawData as any
      };

      // Optimiser la r√©cup√©ration des vid√©os si n√©cessaire
      if (courseData.videoIds && Array.isArray(courseData.videoIds) && courseData.videoIds.length > 0) {
        console.log(`üé• CourseService: R√©cup√©ration optimis√©e de ${courseData.videoIds.length} vid√©os`);
        const videos = await this.fetchVideosInBatch(courseData.videoIds);
        courseData.videos = videos;
      }

      // R√©cup√©rer le design si n√©cessaire (de mani√®re optimis√©e)
      if (!courseData.design && courseData.designId) {
        try {
          console.log(`üé® CourseService: R√©cup√©ration du design ${courseData.designId}`);
          const designDoc = await getDoc(doc(db, 'parcours_designs', courseData.designId));
          if (designDoc.exists()) {
            courseData.design = {
              id: designDoc.id,
              ...designDoc.data()
            };
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è CourseService: Erreur lors de la r√©cup√©ration du design:', error);
        }
      }

      // Mettre en cache
      parcoursCache.set(courseId, {
        data: courseData,
        timestamp: Date.now()
      });
      
      console.log(`‚úÖ CourseService: Parcours ID=${courseId} r√©cup√©r√© et mis en cache`);
      return courseData;
    } catch (error) {
      console.error(`‚ùå CourseService: Erreur lors de la r√©cup√©ration du parcours ID=${courseId}:`, error);
      throw error;
    }
  }

  // M√©thode pour vider le cache (utile pour les tests ou le rafra√Æchissement forc√©)
  clearCache(courseId?: string) {
    if (courseId) {
      parcoursCache.delete(courseId);
      console.log(`üóëÔ∏è CourseService: Cache vid√© pour le parcours ${courseId}`);
    } else {
      parcoursCache.clear();
      console.log('üóëÔ∏è CourseService: Cache enti√®rement vid√©');
    }
  }

  async getCourseProgress(userId: string, courseId: string): Promise<CourseProgress | null> {
    try {
      const progressDoc = await getDoc(doc(db, 'courseProgress', `${userId}_${courseId}`));
      if (!progressDoc.exists()) {
        return null;
      }

      return progressDoc.data() as CourseProgress;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de la progression:', error);
      return null;
    }
  }

  async updateCourseProgress(
    userId: string,
    courseId: string,
    contentId: string,
    isCompleted: boolean
  ): Promise<void> {
    try {
      const progressRef = doc(db, 'courseProgress', `${userId}_${courseId}`);
      const progressDoc = await getDoc(progressRef);

      if (!progressDoc.exists()) {
        // Cr√©er un nouveau document de progression
        const course = await this.getCourse(courseId);
        const newProgress: CourseProgress = {
          courseId,
          userId,
          completedContents: isCompleted ? [contentId] : [],
          currentContentIndex: 0,
          lastAccessedAt: new Date(),
          totalProgress: isCompleted ? (1 / course.contents.length) * 100 : 0,
        };
        await setDoc(progressRef, newProgress);
      } else {
        const progress = progressDoc.data() as CourseProgress;
        const completedContents = isCompleted
          ? [...new Set([...progress.completedContents, contentId])]
          : progress.completedContents.filter(id => id !== contentId);

        const course = await this.getCourse(courseId);
        const totalProgress = (completedContents.length / course.contents.length) * 100;

        await updateDoc(progressRef, {
          completedContents,
          totalProgress,
          lastAccessedAt: new Date(),
        });
      }
    } catch (error) {
      console.error('Erreur lors de la mise √† jour de la progression:', error);
      throw error;
    }
  }

  async getNextCourse(courseId: string): Promise<Course | null> {
    try {
      const course = await this.getCourse(courseId);
      if (!course.nextCourses || course.nextCourses.length === 0) {
        return null;
      }

      // R√©cup√©rer le premier parcours suivant
      return this.getCourse(course.nextCourses[0]);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration du parcours suivant:', error);
      return null;
    }
  }

  async getPreviousCourse(courseId: string): Promise<Course | null> {
    try {
      const course = await this.getCourse(courseId);
      if (!course.prerequisites || course.prerequisites.length === 0) {
        return null;
      }

      // R√©cup√©rer le dernier parcours requis
      return this.getCourse(course.prerequisites[course.prerequisites.length - 1]);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration du parcours pr√©c√©dent:', error);
      return null;
    }
  }

  // Fonction pour obtenir les statuts des vid√©os bas√©s sur les vid√©os compl√©t√©es et d√©bloqu√©es
  getVideoStatuses(
    videos: Array<any>,
    completedVideos: string[] = [],
    unlockedVideos: string[] = []
  ): Record<string, 'blocked' | 'unlocked' | 'completed'> {
    const statuses: Record<string, 'blocked' | 'unlocked' | 'completed'> = {};

    // Trier les vid√©os par ordre
    const sortedVideos = [...videos].sort((a, b) => {
      const orderA = a.order || a.ordre || 0;
      const orderB = b.order || b.ordre || 0;
      return orderA - orderB;
    });

    // Par d√©faut, la premi√®re vid√©o est d√©bloqu√©e
    if (sortedVideos.length > 0) {
      const firstVideoId = sortedVideos[0].id;
      statuses[firstVideoId] = 'unlocked';
    }

    // Marquer les vid√©os compl√©t√©es
    completedVideos.forEach(videoId => {
      statuses[videoId] = 'completed';
    });

    // Marquer les vid√©os explicitement d√©bloqu√©es
    unlockedVideos.forEach(videoId => {
      if (!statuses[videoId] || statuses[videoId] !== 'completed') {
        statuses[videoId] = 'unlocked';
      }
    });

    // D√©bloquer les vid√©os qui suivent une vid√©o compl√©t√©e
    for (let i = 0; i < sortedVideos.length - 1; i++) {
      const currentVideoId = sortedVideos[i].id;
      const nextVideoId = sortedVideos[i + 1].id;

      if (statuses[currentVideoId] === 'completed' && !statuses[nextVideoId]) {
        statuses[nextVideoId] = 'unlocked';
      }
    }

    // Marquer les vid√©os restantes comme bloqu√©es
    sortedVideos.forEach(video => {
      if (!statuses[video.id]) {
        statuses[video.id] = 'blocked';
      }
    });

    return statuses;
  }

  // D√©bloquer une vid√©o avec des Dodji
  async unlockVideoWithDodji(userId: string, courseId: string, videoId: string): Promise<boolean> {
    try {
      // TODO: Impl√©menter la logique pour d√©bloquer une vid√©o avec des Dodji
      // 1. V√©rifier que l'utilisateur a assez de Dodji
      // 2. D√©duire les Dodji
      // 3. Ajouter la vid√©o √† la liste des vid√©os d√©bloqu√©es
      
      // Pour l'instant, simuler un succ√®s
      const progressRef = doc(db, 'courseProgress', `${userId}_${courseId}`);
      const progressDoc = await getDoc(progressRef);
      
      if (!progressDoc.exists()) {
        // Cr√©er un nouveau document de progression avec cette vid√©o d√©bloqu√©e
        await setDoc(progressRef, {
          courseId,
          userId,
          completedContents: [],
          unlockedVideos: [videoId],
          lastAccessedAt: new Date(),
          lastViewedContentId: videoId
        });
      } else {
        // Mettre √† jour le document existant
        const progressData = progressDoc.data();
        const unlockedVideos = [...(progressData.unlockedVideos || []), videoId];
        
        await updateDoc(progressRef, {
          unlockedVideos: [...new Set(unlockedVideos)],
          lastAccessedAt: new Date(),
          lastViewedContentId: videoId
        });
      }
      
      return true;
    } catch (error) {
      console.error('Erreur lors du d√©blocage de la vid√©o avec des Dodji:', error);
      return false;
    }
  }

  // Mettre √† jour la derni√®re vid√©o visionn√©e
  async updateLastViewedContent(userId: string, courseId: string, contentId: string): Promise<void> {
    try {
      const progressRef = doc(db, 'courseProgress', `${userId}_${courseId}`);
      const progressDoc = await getDoc(progressRef);
      
      if (!progressDoc.exists()) {
        // Cr√©er un nouveau document de progression
        const newProgress = {
          courseId,
          userId,
          completedContents: [],
          lastViewedContentId: contentId,
          lastAccessedAt: new Date(),
          currentContentIndex: 0,
          totalProgress: 0
        };
        
        await setDoc(progressRef, newProgress).catch(() => {
          // Ignorer silencieusement l'erreur de permission
          console.debug('Impossible de cr√©er le document de progression - permissions insuffisantes');
        });
      } else {
        // Mettre √† jour le document existant
        await updateDoc(progressRef, {
          lastViewedContentId: contentId,
          lastAccessedAt: new Date()
        }).catch(() => {
          // Ignorer silencieusement l'erreur de permission
          console.debug('Impossible de mettre √† jour le document de progression - permissions insuffisantes');
        });
      }
    } catch (error) {
      // Ignorer silencieusement l'erreur
      console.debug('Erreur ignor√©e lors de la mise √† jour de la progression:', error);
    }
  }
}

export const courseService = new CourseService(); 