import { doc, getDoc, updateDoc, setDoc, collection, query, where, getDocs, onSnapshot } from 'firebase/firestore';
import { db } from './firebase';
import { Course, CourseContent, CourseProgress } from '../types/course';

// Interface pour les donn√©es de parcours
interface ParcoursData {
  id: string;
  title?: string;
  titre?: string;
  description?: string;
  videos?: Array<{
    id: string;
    title?: string;
    titre?: string;
    duration?: number;
    duree?: number;
    order?: number;
    ordre?: number;
  }>;
  design?: {
    id?: string;
    backgroundImageUrl?: string;
    imageUrl?: string;
    positions?: Record<string, { x: number; y: number; order?: number; isAnnex: boolean }>;
  };
  thumbnail?: string;
  thumbnailUrl?: string;
  error?: string;
  [key: string]: any;
}

class CourseService {
  async getCourse(courseId: string): Promise<Course> {
    try {
      const courseDoc = await getDoc(doc(db, 'courses', courseId));
      if (!courseDoc.exists()) {
        throw new Error('Parcours non trouv√©');
      }

      return courseDoc.data() as Course;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration du parcours:', error);
      throw error;
    }
  }

  async getCourseById(courseId: string): Promise<ParcoursData | null> {
    try {
      console.log(`üîç R√©cup√©ration du parcours ID=${courseId} dans la collection "parcours"`);
      const courseDoc = await getDoc(doc(db, 'parcours', courseId));
      
      if (!courseDoc.exists()) {
        console.warn(`‚ö†Ô∏è Parcours ID=${courseId} non trouv√© dans la collection "parcours"`);
        return null;
      }

      // R√©cup√©ration des donn√©es brutes pour inspection
      const rawData = courseDoc.data();
      console.log(`üìÑ Donn√©es brutes du document:`, rawData);
      console.log(`üñºÔ∏è Champ thumbnail:`, rawData.thumbnail);
      
      const courseData: ParcoursData = {
        id: courseDoc.id,
        ...courseDoc.data() as any
      };
      
      console.log(`‚úÖ Parcours ID=${courseId} r√©cup√©r√© avec succ√®s`);
      console.log(`üñºÔ∏è Valeur du champ thumbnail:`, courseData.thumbnail);
      
      return courseData;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la r√©cup√©ration du parcours ID=${courseId}:`, error);
      throw error;
    }
  }

  async getCourseProgress(userId: string, courseId: string): Promise<CourseProgress | null> {
    try {
      const progressDoc = await getDoc(doc(db, 'courseProgress', `${userId}_${courseId}`));
      if (!progressDoc.exists()) {
        return null;
      }

      return progressDoc.data() as CourseProgress;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de la progression:', error);
      return null;
    }
  }

  async updateCourseProgress(
    userId: string,
    courseId: string,
    contentId: string,
    isCompleted: boolean
  ): Promise<void> {
    try {
      const progressRef = doc(db, 'courseProgress', `${userId}_${courseId}`);
      const progressDoc = await getDoc(progressRef);

      if (!progressDoc.exists()) {
        // Cr√©er un nouveau document de progression
        const course = await this.getCourse(courseId);
        const newProgress: CourseProgress = {
          courseId,
          userId,
          completedContents: isCompleted ? [contentId] : [],
          currentContentIndex: 0,
          lastAccessedAt: new Date(),
          totalProgress: isCompleted ? (1 / course.contents.length) * 100 : 0,
        };
        await setDoc(progressRef, newProgress);
      } else {
        const progress = progressDoc.data() as CourseProgress;
        const completedContents = isCompleted
          ? [...new Set([...progress.completedContents, contentId])]
          : progress.completedContents.filter(id => id !== contentId);

        const course = await this.getCourse(courseId);
        const totalProgress = (completedContents.length / course.contents.length) * 100;

        await updateDoc(progressRef, {
          completedContents,
          totalProgress,
          lastAccessedAt: new Date(),
        });
      }
    } catch (error) {
      console.error('Erreur lors de la mise √† jour de la progression:', error);
      throw error;
    }
  }

  async getNextCourse(courseId: string): Promise<Course | null> {
    try {
      const course = await this.getCourse(courseId);
      if (!course.nextCourses || course.nextCourses.length === 0) {
        return null;
      }

      // R√©cup√©rer le premier parcours suivant
      return this.getCourse(course.nextCourses[0]);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration du parcours suivant:', error);
      return null;
    }
  }

  async getPreviousCourse(courseId: string): Promise<Course | null> {
    try {
      const course = await this.getCourse(courseId);
      if (!course.prerequisites || course.prerequisites.length === 0) {
        return null;
      }

      // R√©cup√©rer le dernier parcours requis
      return this.getCourse(course.prerequisites[course.prerequisites.length - 1]);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration du parcours pr√©c√©dent:', error);
      return null;
    }
  }

  // Fonction pour obtenir les statuts des vid√©os bas√©s sur les vid√©os compl√©t√©es et d√©bloqu√©es
  getVideoStatuses(
    videos: Array<any>,
    completedVideos: string[] = [],
    unlockedVideos: string[] = []
  ): Record<string, 'blocked' | 'unlocked' | 'completed'> {
    const statuses: Record<string, 'blocked' | 'unlocked' | 'completed'> = {};

    // Trier les vid√©os par ordre
    const sortedVideos = [...videos].sort((a, b) => {
      const orderA = a.order || a.ordre || 0;
      const orderB = b.order || b.ordre || 0;
      return orderA - orderB;
    });

    // Par d√©faut, la premi√®re vid√©o est d√©bloqu√©e
    if (sortedVideos.length > 0) {
      const firstVideoId = sortedVideos[0].id;
      statuses[firstVideoId] = 'unlocked';
    }

    // Marquer les vid√©os compl√©t√©es
    completedVideos.forEach(videoId => {
      statuses[videoId] = 'completed';
    });

    // Marquer les vid√©os explicitement d√©bloqu√©es
    unlockedVideos.forEach(videoId => {
      if (!statuses[videoId] || statuses[videoId] !== 'completed') {
        statuses[videoId] = 'unlocked';
      }
    });

    // D√©bloquer les vid√©os qui suivent une vid√©o compl√©t√©e
    for (let i = 0; i < sortedVideos.length - 1; i++) {
      const currentVideoId = sortedVideos[i].id;
      const nextVideoId = sortedVideos[i + 1].id;

      if (statuses[currentVideoId] === 'completed' && !statuses[nextVideoId]) {
        statuses[nextVideoId] = 'unlocked';
      }
    }

    // Marquer les vid√©os restantes comme bloqu√©es
    sortedVideos.forEach(video => {
      if (!statuses[video.id]) {
        statuses[video.id] = 'blocked';
      }
    });

    return statuses;
  }

  // Observer les d√©tails d'un parcours en temps r√©el
  observeParcoursDetail(parcoursId: string, callback: (data: ParcoursData) => void) {
    console.log(`D√©marrage de l'observation du parcours ID=${parcoursId}`);
    
    try {
      // R√©f√©rence au document du parcours
      const parcoursRef = doc(db, 'parcours', parcoursId);
      
      console.log(`Observation configur√©e pour la collection 'parcours' avec l'ID: ${parcoursId}`);
      
      // Observer le document
      const unsubscribe = onSnapshot(
        parcoursRef,
        async (docSnapshot) => {
          if (docSnapshot.exists()) {
            // R√©cup√©rer les donn√©es brutes
            const rawData = docSnapshot.data();
            console.log('Donn√©es brutes du parcours:', rawData);
            
            // Transformer les donn√©es dans le format attendu
            const parcoursData: ParcoursData = {
              id: docSnapshot.id,
              ...rawData as any
            };
            
            console.log('Donn√©es du parcours: titre =', parcoursData.titre || parcoursData.title);
            
            // Traiter le cas o√π les IDs des vid√©os sont dans videoIds plut√¥t que dans videos
            if ((!parcoursData.videos || !Array.isArray(parcoursData.videos) || parcoursData.videos.length === 0) && 
                parcoursData.videoIds && Array.isArray(parcoursData.videoIds)) {
              console.log(`Parcours utilise videoIds au lieu de videos. videoIds:`, parcoursData.videoIds);
              
              try {
                // Pr√©parer un tableau pour stocker les vid√©os r√©cup√©r√©es
                const videosArray = [];
                
                // R√©cup√©rer les d√©tails de chaque vid√©o
                for (const videoId of parcoursData.videoIds) {
                  try {
                    const videoDoc = await getDoc(doc(db, 'videos', videoId));
                    if (videoDoc.exists()) {
                      const videoData = videoDoc.data();
                      videosArray.push({
                        id: videoDoc.id,
                        title: videoData.title || videoData.titre || 'Vid√©o sans titre',
                        titre: videoData.titre || videoData.title || 'Vid√©o sans titre',
                        duration: videoData.duration || videoData.duree || 0,
                        duree: videoData.duree || videoData.duration || 0,
                        order: videoData.order || videoData.ordre || 0,
                        ordre: videoData.ordre || videoData.order || 0,
                        ...videoData
                      });
                    } else {
                      console.warn(`La vid√©o avec ID=${videoId} n'existe pas`);
                    }
                  } catch (error) {
                    console.error(`Erreur lors de la r√©cup√©ration de la vid√©o ID=${videoId}:`, error);
                  }
                }
                
                // Trier les vid√©os par ordre
                videosArray.sort((a, b) => {
                  const orderA = a.order || a.ordre || 0;
                  const orderB = b.order || b.ordre || 0;
                  return orderA - orderB;
                });
                
                console.log(`${videosArray.length} vid√©os r√©cup√©r√©es et tri√©es:`, 
                  videosArray.map(v => `${v.id}: ${v.titre || v.title} (ordre: ${v.ordre || v.order})`));
                
                // Mettre √† jour le parcours avec le tableau de vid√©os
                parcoursData.videos = videosArray;
              } catch (error) {
                console.error('Erreur lors de la r√©cup√©ration des vid√©os:', error);
                parcoursData.videos = [];
              }
            } else if (!parcoursData.videos || !Array.isArray(parcoursData.videos)) {
              console.warn('Le parcours ne contient pas de vid√©os ou le champ videos n\'est pas un tableau');
              parcoursData.videos = [];
            }
            
            // V√©rifier le design
            if (!parcoursData.design || typeof parcoursData.design !== 'object') {
              console.log('R√©cup√©ration du design associ√© au parcours');
              
              // Si un designId est sp√©cifi√©, r√©cup√©rer le design correspondant
              if (parcoursData.designId) {
                try {
                  const designDoc = await getDoc(doc(db, 'parcours_designs', parcoursData.designId));
                  if (designDoc.exists()) {
                    console.log(`Design trouv√© pour designId=${parcoursData.designId}`);
                    parcoursData.design = {
                      id: designDoc.id,
                      ...designDoc.data()
                    };
                  } else {
                    console.warn(`Design avec ID=${parcoursData.designId} non trouv√©`);
                    parcoursData.design = {
                      id: parcoursId + '_design',
                      backgroundImageUrl: '',
                      positions: {}
                    };
                  }
                } catch (error) {
                  console.error(`Erreur lors de la r√©cup√©ration du design ID=${parcoursData.designId}:`, error);
                  parcoursData.design = {
                    id: parcoursId + '_design',
                    backgroundImageUrl: '',
                    positions: {}
                  };
                }
              } else {
                console.warn('Aucun designId sp√©cifi√© pour le parcours');
                parcoursData.design = {
                  id: parcoursId + '_design',
                  backgroundImageUrl: '',
                  positions: {}
                };
              }
            }
            
            console.log('Parcours compl√®tement pr√©par√©:', {
              id: parcoursData.id,
              titre: parcoursData.titre || parcoursData.title,
              videos: parcoursData.videos ? `${parcoursData.videos.length} vid√©os` : 'Aucune vid√©o',
              design: parcoursData.design ? `Design ID: ${parcoursData.design.id}` : 'Pas de design'
            });
            
            callback(parcoursData);
          } else {
            console.error(`Parcours ID=${parcoursId} non trouv√©`);
            const emptyParcours: ParcoursData = { 
              error: "Ce parcours n'existe pas ou a √©t√© supprim√©.",
              id: parcoursId,
              videos: [],
              design: {
                id: parcoursId + '_design',
                backgroundImageUrl: '',
                positions: {}
              }
            };
            callback(emptyParcours);
          }
        },
        (error) => {
          console.error(`Erreur lors de l'observation du parcours ID=${parcoursId}:`, error);
          const errorParcours: ParcoursData = { 
            error: "Une erreur est survenue lors du chargement du parcours.",
            id: parcoursId,
            videos: [],
            design: {
              id: parcoursId + '_design',
              backgroundImageUrl: '',
              positions: {}
            }
          };
          callback(errorParcours);
        }
      );
      
      return unsubscribe;
    } catch (error) {
      console.error(`Erreur lors de la configuration de l'observation du parcours ID=${parcoursId}:`, error);
      const fallbackParcours: ParcoursData = { 
        error: "Une erreur est survenue lors de la configuration du parcours.",
        id: parcoursId,
        videos: [],
        design: {
          id: parcoursId + '_design',
          backgroundImageUrl: '',
          positions: {}
        }
      };
      callback(fallbackParcours);
      
      // Retourner une fonction vide pour √©viter les erreurs
      return () => {
        console.log(`Fonction de d√©sabonnement vide appel√©e pour ID=${parcoursId}`);
      };
    }
  }

  // D√©bloquer une vid√©o avec des Dodji
  async unlockVideoWithDodji(userId: string, courseId: string, videoId: string): Promise<boolean> {
    try {
      // TODO: Impl√©menter la logique pour d√©bloquer une vid√©o avec des Dodji
      // 1. V√©rifier que l'utilisateur a assez de Dodji
      // 2. D√©duire les Dodji
      // 3. Ajouter la vid√©o √† la liste des vid√©os d√©bloqu√©es
      
      // Pour l'instant, simuler un succ√®s
      const progressRef = doc(db, 'courseProgress', `${userId}_${courseId}`);
      const progressDoc = await getDoc(progressRef);
      
      if (!progressDoc.exists()) {
        // Cr√©er un nouveau document de progression avec cette vid√©o d√©bloqu√©e
        await setDoc(progressRef, {
          courseId,
          userId,
          completedContents: [],
          unlockedVideos: [videoId],
          lastAccessedAt: new Date(),
          lastViewedContentId: videoId
        });
      } else {
        // Mettre √† jour le document existant
        const progressData = progressDoc.data();
        const unlockedVideos = [...(progressData.unlockedVideos || []), videoId];
        
        await updateDoc(progressRef, {
          unlockedVideos: [...new Set(unlockedVideos)],
          lastAccessedAt: new Date(),
          lastViewedContentId: videoId
        });
      }
      
      return true;
    } catch (error) {
      console.error('Erreur lors du d√©blocage de la vid√©o avec des Dodji:', error);
      return false;
    }
  }

  // Mettre √† jour la derni√®re vid√©o visionn√©e
  async updateLastViewedContent(userId: string, courseId: string, contentId: string): Promise<void> {
    try {
      console.log(`Mise √† jour de la derni√®re vid√©o visionn√©e: userId=${userId}, courseId=${courseId}, contentId=${contentId}`);
      
      const progressRef = doc(db, 'courseProgress', `${userId}_${courseId}`);
      const progressDoc = await getDoc(progressRef);
      
      if (!progressDoc.exists()) {
        // Cr√©er un nouveau document de progression
        const newProgress = {
          courseId,
          userId,
          completedContents: [],
          lastViewedContentId: contentId,
          lastAccessedAt: new Date(),
          currentContentIndex: 0,
          totalProgress: 0
        };
        
        await setDoc(progressRef, newProgress);
        console.log(`Nouveau document de progression cr√©√© avec lastViewedContentId=${contentId}`);
      } else {
        // Mettre √† jour le document existant
        await updateDoc(progressRef, {
          lastViewedContentId: contentId,
          lastAccessedAt: new Date()
        });
        console.log(`Document de progression mis √† jour avec lastViewedContentId=${contentId}`);
      }
    } catch (error) {
      console.error('Erreur lors de la mise √† jour de la derni√®re vid√©o visionn√©e:', error);
      throw error;
    }
  }
}

export const courseService = new CourseService(); 