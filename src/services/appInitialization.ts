import { homeDataCacheService } from './homeDataCache';
import { imageCacheService } from './imageCache';
import { Section, Level } from '../types/home';

interface InitializationProgress {
  step: string;
  progress: number; // 0-100
  message: string;
}

type ProgressCallback = (progress: InitializationProgress) => void;

class AppInitializationService {
  private isInitialized = false;
  private initializationPromise: Promise<void> | null = null;

  /**
   * Initialise l'application en pr√©chargeant toutes les donn√©es n√©cessaires
   */
  async initialize(onProgress?: ProgressCallback, loadGlobalDataOnly: boolean = false): Promise<void> {
    if (this.isInitialized) {
      console.log('‚úÖ Application d√©j√† initialis√©e');
      return;
    }

    if (this.initializationPromise) {
      console.log('‚è≥ Initialisation d√©j√† en cours...');
      return this.initializationPromise;
    }

    this.initializationPromise = this._performInitialization(onProgress, loadGlobalDataOnly);
    return this.initializationPromise;
  }

  private async _performInitialization(onProgress?: ProgressCallback, loadGlobalDataOnly: boolean = false): Promise<void> {
    console.log(`üöÄ D√©but de l'initialisation ${loadGlobalDataOnly ? '(donn√©es globales uniquement)' : '(compl√®te)'}`);

    try {
      if (loadGlobalDataOnly) {
        // Mode donn√©es globales uniquement - focus sur les donn√©es essentielles
        console.log('üìä Mode chargement donn√©es globales uniquement');
        
        // √âtape 1: Pr√©charger les donn√©es des 6 sous-pages (images + parcours)
        onProgress?.({
          step: 'homeData',
          progress: 20,
          message: 'Chargement des donn√©es globales (images et parcours)...'
        });

        console.log('üîÑ Initialisation du cache des donn√©es de la page d\'accueil...');
        await homeDataCacheService.initialize();
        console.log('‚úÖ Cache des donn√©es de la page d\'accueil initialis√©');

        // √âtape 2: V√©rification du cache
        onProgress?.({
          step: 'verification',
          progress: 80,
          message: 'V√©rification des donn√©es charg√©es...'
        });

        const cacheStats = homeDataCacheService.getCacheStats();
        console.log('üìä Statistiques du cache apr√®s chargement global:', cacheStats);

        if (cacheStats.validEntries === 0) {
          throw new Error('Aucune donn√©e valide charg√©e dans le cache');
        }

        // √âtape 3: Finalisation
        onProgress?.({
          step: 'complete',
          progress: 100,
          message: 'Donn√©es globales charg√©es avec succ√®s !'
        });

        console.log(`üéâ Chargement des donn√©es globales termin√© - ${cacheStats.validEntries} entr√©es valides en cache`);
        
      } else {
        // Mode initialisation compl√®te (comme avant)
        console.log('üîß Mode initialisation compl√®te');
        
        // √âtape 1: Initialiser le cache d'images
        onProgress?.({
          step: 'imageCache',
          progress: 10,
          message: 'Initialisation du cache d\'images...'
        });

        await imageCacheService.initialize();
        console.log('‚úÖ Cache d\'images initialis√©');

        // √âtape 2: Nettoyer les images expir√©es
        onProgress?.({
          step: 'cleanup',
          progress: 20,
          message: 'Nettoyage des donn√©es expir√©es...'
        });

        await imageCacheService.cleanExpiredImages();
        console.log('‚úÖ Images expir√©es nettoy√©es');

        // √âtape 3: Pr√©charger les donn√©es des 6 sous-pages et r√©cup√©rer les URLs d'images
        onProgress?.({
          step: 'homeData',
          progress: 30,
          message: 'Pr√©chargement des donn√©es de la page d\'accueil...'
        });

        await homeDataCacheService.initialize();
        console.log('‚úÖ Donn√©es de la page d\'accueil pr√©charg√©es');

        // √âtape 4: Pr√©charger les images maintenant que nous avons les URLs
        onProgress?.({
          step: 'images',
          progress: 60,
          message: 'Pr√©chargement des images...'
        });

        // R√©cup√©rer les URLs d'images depuis le cache de donn√©es
        const sections: Section[] = ['Bourse', 'Crypto'];
        const levels: Level[] = ['D√©butant', 'Avanc√©', 'Expert'];
        const imageUrls: Record<string, string> = {};

        for (const section of sections) {
          for (const level of levels) {
            try {
              const data = await homeDataCacheService.getData(section, level);
              if (data.imageUrl) {
                const key = `${section}_${level}`;
                imageUrls[key] = data.imageUrl;
                console.log(`üì∏ URL d'image r√©cup√©r√©e pour ${section} - ${level}: ${data.imageUrl.substring(0, 50)}...`);
              }
            } catch (error) {
              console.error(`Erreur r√©cup√©ration URL image ${section} - ${level}:`, error);
            }
          }
        }

        // Pr√©charger toutes les images avec les URLs r√©cup√©r√©es
        await imageCacheService.preloadAllHomeImages(imageUrls);
        console.log('‚úÖ Images pr√©charg√©es');

        // √âtape 5: V√©rification du cache
        onProgress?.({
          step: 'verification',
          progress: 90,
          message: 'V√©rification du cache...'
        });

        const cacheStats = homeDataCacheService.getCacheStats();
        const imageStats = imageCacheService.getCacheStats();
        
        console.log('üìä Statistiques du cache:', {
          homeData: cacheStats,
          images: imageStats
        });

        // √âtape 6: Finalisation
        onProgress?.({
          step: 'complete',
          progress: 100,
          message: 'Initialisation termin√©e'
        });

        console.log('üéâ Initialisation de l\'application termin√©e avec succ√®s');
      }

      this.isInitialized = true;

    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation de l\'application:', error);
      
      onProgress?.({
        step: 'error',
        progress: 0,
        message: 'Erreur lors de l\'initialisation'
      });

      // R√©initialiser pour permettre une nouvelle tentative
      this.isInitialized = false;
      this.initializationPromise = null;
      
      throw error;
    }
  }

  /**
   * V√©rifie si l'application est initialis√©e
   */
  isAppInitialized(): boolean {
    return this.isInitialized;
  }

  /**
   * Force une r√©initialisation compl√®te
   */
  async reinitialize(onProgress?: ProgressCallback): Promise<void> {
    console.log('üîÑ R√©initialisation forc√©e de l\'application');
    
    // Nettoyer les caches
    homeDataCacheService.clearCache();
    await imageCacheService.clearCache();
    
    // R√©initialiser l'√©tat
    this.isInitialized = false;
    this.initializationPromise = null;
    
    // Relancer l'initialisation
    return this.initialize(onProgress);
  }

  /**
   * Pr√©charge sp√©cifiquement les images pour une meilleure UX
   */
  async preloadCriticalImages(): Promise<void> {
    console.log('üñºÔ∏è Pr√©chargement des images critiques');
    
    // Cette m√©thode peut √™tre appel√©e tr√®s t√¥t dans le cycle de vie de l'app
    // pour commencer le pr√©chargement des images avant m√™me l'initialisation compl√®te
    
    try {
      await imageCacheService.initialize();
      
      // Ici, on pourrait ajouter une logique pour pr√©charger seulement
      // les images les plus importantes (ex: page d'accueil par d√©faut)
      console.log('‚úÖ Images critiques pr√©charg√©es');
    } catch (error) {
      console.error('‚ùå Erreur lors du pr√©chargement des images critiques:', error);
    }
  }

  /**
   * Obtient les statistiques globales de l'initialisation
   */
  getInitializationStats(): {
    isInitialized: boolean;
    homeDataCache: any;
    imageCache: any;
  } {
    return {
      isInitialized: this.isInitialized,
      homeDataCache: this.isInitialized ? homeDataCacheService.getCacheStats() : null,
      imageCache: this.isInitialized ? imageCacheService.getCacheStats() : null
    };
  }

  /**
   * M√©thode utilitaire pour v√©rifier la connectivit√© et adapter le comportement
   */
  async initializeWithConnectivityCheck(onProgress?: ProgressCallback): Promise<void> {
    try {
      // V√©rifier la connectivit√© (peut √™tre √©tendu avec NetInfo)
      const isOnline = true; // Placeholder - √† remplacer par une vraie v√©rification
      
      if (!isOnline) {
        console.log('üì± Mode hors ligne d√©tect√© - initialisation limit√©e');
        onProgress?.({
          step: 'offline',
          progress: 50,
          message: 'Mode hors ligne - chargement des donn√©es en cache...'
        });
        
        // En mode hors ligne, on initialise seulement les caches locaux
        await imageCacheService.initialize();
        this.isInitialized = true;
        return;
      }
      
      // Mode en ligne - initialisation compl√®te
      return this.initialize(onProgress);
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation avec v√©rification de connectivit√©:', error);
      throw error;
    }
  }
}

// Instance singleton
export const appInitializationService = new AppInitializationService();

// Types export√©s pour l'utilisation dans les composants
export type { InitializationProgress, ProgressCallback }; 