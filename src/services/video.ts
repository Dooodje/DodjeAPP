import { collection, doc, getDoc, getDocs, query, where, updateDoc, setDoc, Timestamp, FieldValue, onSnapshot } from 'firebase/firestore';
import { db } from './firebase';
import { Video, VideoProgress, RelatedVideo, LastVideoResult } from '../types/video';

const VIDEOS_COLLECTION = 'videos';
const USERS_COLLECTION = 'users';

export const videoService = {
  // Observer une vid√©o en temps r√©el
  observeVideoById(videoId: string, callback: (video: Video | null) => void): () => void {
    if (!videoId) {
      console.warn('‚ùå observeVideoById - ID vid√©o non sp√©cifi√©');
      callback(null);
      return () => {};
    }

    console.log(`üîç observeVideoById - Configuration de l'observation pour la vid√©o ${videoId}`);
    
    const videoRef = doc(db, VIDEOS_COLLECTION, videoId);
    
    const unsubscribe = onSnapshot(
      videoRef,
      (docSnapshot) => {
        if (docSnapshot.exists()) {
          const videoData = docSnapshot.data();
          
          // S'assurer que l'URL vid√©o est d√©finie et valide
          const videoUrl = videoData.videoUrl || '';
          
          console.log(`üé• observeVideoById - URL vid√©o mise √† jour pour ${videoId}: ${videoUrl}`);
          
          // Cr√©er l'objet Video avec l'id et les donn√©es
          const video: Video = {
            id: videoId,
            title: videoData.title || '',
            titre: videoData.titre || videoData.title || '',
            description: videoData.description || '',
            videoUrl: videoUrl,
            duration: videoData.duration || 0,
            duree: videoData.duree || '00:00',
            thumbnail: videoData.thumbnail || '',
            order: videoData.order || 0,
            courseId: videoData.courseId || videoData.parcoursId || '',
            isUnlocked: true // Forcer toutes les vid√©os comme d√©bloqu√©es
          };
          
          console.log(`‚úÖ observeVideoById - Vid√©o ${videoId} mise √† jour re√ßue`);
          callback(video);
        } else {
          console.warn(`‚ùå observeVideoById - Vid√©o ${videoId} non trouv√©e`);
          callback(null);
        }
      },
      (error) => {
        console.error(`‚ùå observeVideoById - Erreur lors de l'observation de la vid√©o ${videoId}:`, error);
        callback(null);
      }
    );

    return unsubscribe;
  },

  // Observer la progression d'une vid√©o en temps r√©el
  observeVideoProgress(userId: string, videoId: string, callback: (progress: {
    currentTime: number;
    duration: number;
    completionStatus: string;
    lastUpdated: Date;
  } | null) => void): () => void {
    if (!userId || !videoId) {
      console.warn('‚ùå observeVideoProgress - userId et videoId sont requis');
      callback(null);
      return () => {};
    }

    console.log(`üîç observeVideoProgress - Configuration de l'observation pour la progression ${userId}/${videoId}`);
    
    const videoRef = doc(db, `${USERS_COLLECTION}/${userId}/video/${videoId}`);
    
    const unsubscribe = onSnapshot(
      videoRef,
      (docSnapshot) => {
        if (docSnapshot.exists()) {
          const data = docSnapshot.data();
          const progress = {
            currentTime: data.currentTime || 0,
            duration: data.duration || 0,
            completionStatus: data.completionStatus || 'notStarted',
            lastUpdated: data.lastUpdated instanceof Timestamp 
              ? data.lastUpdated.toDate() 
              : new Date(data.lastUpdated || Date.now())
          };
          
          console.log(`‚úÖ observeVideoProgress - Progression mise √† jour pour ${videoId}:`, progress);
          callback(progress);
        } else {
          // Retourner un objet par d√©faut si aucune progression n'existe
          const defaultProgress = {
            currentTime: 0,
            duration: 0,
            completionStatus: 'notStarted',
            lastUpdated: new Date()
          };
          
          console.log(`‚ÑπÔ∏è observeVideoProgress - Aucune progression trouv√©e pour ${videoId}, utilisation des valeurs par d√©faut`);
          callback(defaultProgress);
        }
      },
      (error) => {
        console.error(`‚ùå observeVideoProgress - Erreur lors de l'observation de la progression ${videoId}:`, error);
        callback(null);
      }
    );

    return unsubscribe;
  },

  // Observer les vid√©os li√©es d'un cours en temps r√©el
  observeRelatedVideos(courseId: string | undefined, currentVideoId: string, callback: (videos: RelatedVideo[]) => void): () => void {
    if (!courseId) {
      console.log('‚ÑπÔ∏è observeRelatedVideos - courseId non d√©fini, retour d\'un tableau vide');
      callback([]);
      return () => {};
    }

    console.log(`üîç observeRelatedVideos - Configuration de l'observation pour les vid√©os du cours ${courseId}`);
    
    const videosQuery = query(
      collection(db, VIDEOS_COLLECTION),
      where('courseId', '==', courseId)
    );
    
    const unsubscribe = onSnapshot(
      videosQuery,
      (querySnapshot) => {
        const relatedVideos = querySnapshot.docs
          .map(doc => {
            const videoData = doc.data() as Video;
            return {
              id: doc.id,
              title: videoData.title,
              thumbnail: videoData.thumbnail || videoData.videoUrl,
              duration: videoData.duration,
              progress: 0
            } as RelatedVideo;
          })
          .filter(video => video.id !== currentVideoId); // Filtrer la vid√©o courante
        
        console.log(`‚úÖ observeRelatedVideos - ${relatedVideos.length} vid√©os li√©es mises √† jour pour le cours ${courseId}`);
        callback(relatedVideos);
      },
      (error) => {
        console.error(`‚ùå observeRelatedVideos - Erreur lors de l'observation des vid√©os li√©es:`, error);
        callback([]);
      }
    );

    return unsubscribe;
  },

  // R√©cup√©rer une vid√©o par son ID
  async getVideoById(videoId: string): Promise<Video | null> {
    if (!videoId) {
      console.warn('‚ùå getVideoById - ID vid√©o non sp√©cifi√©');
      return null;
    }

    try {
      const videoRef = doc(db, VIDEOS_COLLECTION, videoId);
      const videoDoc = await getDoc(videoRef);

      if (!videoDoc.exists()) {
        console.warn(`‚ùå getVideoById - Vid√©o ${videoId} non trouv√©e`);
        return null;
      }

      // R√©cup√©rer toutes les donn√©es du document
      const videoData = videoDoc.data();
      
      // S'assurer que l'URL vid√©o est d√©finie et valide
      const videoUrl = videoData.videoUrl || '';
      
      console.log(`üé• URL vid√©o pour ${videoId}: ${videoUrl}`);
      
      // Cr√©er l'objet Video avec l'id et les donn√©es
      // S'assurer que les champs duree et thumbnail sont pr√©sents
      const video: Video = {
        id: videoId,
        title: videoData.title || '',
        titre: videoData.titre || videoData.title || '',  // Utiliser titre ou title
        description: videoData.description || '',
        videoUrl: videoUrl,
        duration: videoData.duration || 0,
        duree: videoData.duree || '00:00',  // Assurer la pr√©sence de duree
        thumbnail: videoData.thumbnail || '',  // Assurer la pr√©sence de thumbnail
        order: videoData.order || 0,
        courseId: videoData.courseId || videoData.parcoursId || '',
        isUnlocked: true // Forcer toutes les vid√©os comme d√©bloqu√©es
      };
      
      console.log(`‚úÖ getVideoById - Vid√©o ${videoId} r√©cup√©r√©e avec succ√®s`);
      console.log(`‚úÖ getVideoById - Titre: ${video.title || video.titre}`);
      console.log(`‚úÖ getVideoById - URL: ${video.videoUrl}`);
      console.log(`‚úÖ getVideoById - Dur√©e: ${video.duree}`);
      console.log(`‚úÖ getVideoById - Thumbnail: ${video.thumbnail ? 'Pr√©sent' : 'Non disponible'}`);
      
      return video;
    } catch (error) {
      console.error(`‚ùå getVideoById - Erreur lors de la r√©cup√©ration de la vid√©o ${videoId}:`, error);
      return null;
    }
  },

  // R√©cup√©rer les vid√©os li√©es √† un cours
  async getRelatedVideos(courseId: string | undefined, currentVideoId: string): Promise<RelatedVideo[]> {
    try {
      if (!courseId) {
        return []; // Retourner un tableau vide si courseId n'est pas d√©fini
      }
      
      // Utiliser une requ√™te simple qui ne n√©cessite pas d'index compos√©
      const videosQuery = query(
        collection(db, VIDEOS_COLLECTION),
        where('courseId', '==', courseId)
      );
      const querySnapshot = await getDocs(videosQuery);
      
      // Filtrer les vid√©os c√¥t√© client
      return querySnapshot.docs
        .map(doc => {
          const videoData = doc.data() as Video;
          return {
            id: videoData.id,
            title: videoData.title,
            thumbnail: videoData.thumbnail || videoData.videoUrl,
            duration: videoData.duration,
            progress: 0
          } as RelatedVideo;
        })
        .filter(video => video.id !== currentVideoId); // Filtrer la vid√©o courante
    } catch (error) {
      // Utiliser console.debug pour √©viter d'afficher l'erreur dans la console
      console.debug('Info: Impossible de r√©cup√©rer les vid√©os li√©es', error);
      return []; // Retourner un tableau vide en cas d'erreur
    }
  },

  // Mettre √† jour la progression d'une vid√©o
  async updateVideoProgress(
    userId: string, 
    videoId: string, 
    progressUpdate: {
      currentTime: number;
      completionStatus: 'blocked' | 'unblocked' | 'completed';
    }
  ): Promise<void> {
    try {
      if (!userId || !videoId) {
        throw new Error('userId et videoId sont requis');
      }

      // R√©cup√©rer d'abord les m√©tadonn√©es de la vid√©o depuis la collection videos
      const videoRef = doc(db, VIDEOS_COLLECTION, videoId);
      const videoDoc = await getDoc(videoRef);

      if (!videoDoc.exists()) {
        throw new Error(`La vid√©o ${videoId} n'existe pas dans la collection videos`);
      }

      const videoData = videoDoc.data();
      // Convertir la dur√©e du format "MM:SS" en secondes
      const durationParts = (videoData.duree || "00:00").split(":");
      const durationInSeconds = parseInt(durationParts[0]) * 60 + parseInt(durationParts[1]);

      const userVideoRef = doc(db, `${USERS_COLLECTION}/${userId}/video/${videoId}`);
      
      const progressData: VideoProgress = {
        currentTime: progressUpdate.currentTime,
        duration: durationInSeconds,
        completionStatus: progressUpdate.completionStatus,
        lastUpdated: new Date(),
        percentage: Math.floor((progressUpdate.currentTime / durationInSeconds) * 100),
        metadata: {
          videoId: videoId,
          courseId: videoData.parcoursId || videoData.courseId || '',
          videoSection: videoData.section || '',
          videoTitle: videoData.titre || videoData.title || '',
          progress: Math.floor((progressUpdate.currentTime / durationInSeconds) * 100)
        }
      };

      await setDoc(userVideoRef, progressData, { merge: true });

      console.log(`‚úÖ Progression mise √† jour pour la vid√©o ${videoId}`);
      console.log(`üìä Dur√©e: ${durationInSeconds}s, Progression: ${progressUpdate.currentTime}s`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour de la progression:', error);
      throw error;
    }
  },

  // R√©cup√©rer la progression d'une vid√©o
  async getVideoProgress(userId: string, videoId: string): Promise<{
    currentTime: number;
    duration: number;
    completionStatus: string;
    lastUpdated: Date;
  } | null> {
    try {
      if (!userId || !videoId) {
        throw new Error('userId et videoId sont requis');
      }

      const videoRef = doc(db, `${USERS_COLLECTION}/${userId}/video/${videoId}`);
      const videoDoc = await getDoc(videoRef);

      if (!videoDoc.exists()) {
        // Retourner un objet par d√©faut si aucune progression n'existe
        return {
          currentTime: 0,
          duration: 0,
          completionStatus: 'notStarted',
          lastUpdated: new Date()
        };
      }

      const data = videoDoc.data();
      return {
        currentTime: data.currentTime || 0,
        duration: data.duration || 0,
        completionStatus: data.completionStatus || 'notStarted',
        lastUpdated: data.lastUpdated instanceof Timestamp 
          ? data.lastUpdated.toDate() 
          : new Date(data.lastUpdated || Date.now())
      };
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la progression:', error);
      throw error;
    }
  },

  // D√©bloquer une vid√©o
  async unlockVideo(userId: string, videoId: string): Promise<boolean> {
    try {
      // Mettre √† jour le statut de la vid√©o pour l'utilisateur
      const userVideoRef = doc(db, `users/${userId}/unlocked_videos`, videoId);
      await setDoc(userVideoRef, { 
        unlockedAt: Timestamp.now(),
        videoId
      });
      
      return true;
    } catch (error) {
      console.error('Erreur lors du d√©blocage de la vid√©o:', error);
      throw error;
    }
  },

  // V√©rifier si une vid√©o est d√©bloqu√©e pour un utilisateur
  async isVideoUnlocked(userId: string, videoId: string): Promise<boolean> {
    try {
      const userVideoRef = doc(db, `users/${userId}/unlocked_videos`, videoId);
      const docSnap = await getDoc(userVideoRef);
      return docSnap.exists();
    } catch (error) {
      console.error('Erreur lors de la v√©rification si la vid√©o est d√©bloqu√©e:', error);
      return false;
    }
  },

  // Marquer une vid√©o comme compl√©t√©e
  async markVideoAsCompleted(userId: string, videoId: string): Promise<void> {
    try {
      // Mettre √† jour la progression
      await this.updateVideoProgress(userId, videoId, {
        currentTime: 0,
        completionStatus: 'completed'
      });
      
      // Enregistrer que la vid√©o a √©t√© compl√©t√©e
      const completedRef = doc(db, `users/${userId}/completed_videos`, videoId);
      await setDoc(completedRef, {
        completedAt: Timestamp.now(),
        videoId
      });
    } catch (error) {
      console.error('Erreur lors du marquage de la vid√©o comme compl√©t√©e:', error);
      throw error;
    }
  },

  // R√©cup√©rer la prochaine vid√©o dans un parcours
  async getNextVideo(courseId: string | undefined, currentVideoId: string): Promise<Video | LastVideoResult | null> {
    try {
      console.log('üîç getNextVideo - D√©marrage avec courseId:', courseId, 'et currentVideoId:', currentVideoId);
      
      if (!courseId) {
        console.log('‚ö†Ô∏è getNextVideo - courseId non d√©fini, retour null');
        return null;
      }
      
      // 1. R√©cup√©rer le document du parcours pour obtenir la liste ordonn√©e des vid√©os
      console.log('üîç getNextVideo - R√©cup√©ration du document de parcours:', courseId);
      const courseDoc = await getDoc(doc(db, 'parcours', courseId));
      
      if (!courseDoc.exists()) {
        console.log('‚ö†Ô∏è getNextVideo - document de parcours non trouv√©');
        return null;
      }
      
      const courseData = courseDoc.data();
      const videoIds = courseData.videoIds || [];
      
      console.log('üîç getNextVideo - Liste des IDs de vid√©os du parcours:', videoIds);
      
      if (!videoIds.length) {
        console.log('‚ö†Ô∏è getNextVideo - aucune vid√©o dans ce parcours');
        return null;
      }
      
      // Trouver l'index de la vid√©o actuelle dans la liste
      const currentIndex = videoIds.indexOf(currentVideoId);
      console.log(`üîç getNextVideo - Index de la vid√©o actuelle: ${currentIndex}`);
      
      if (currentIndex === -1) {
        console.log('‚ö†Ô∏è getNextVideo - vid√©o actuelle non trouv√©e dans la liste des IDs');
        return null;
      }
      
      // S'il n'y a pas de vid√©o suivante dans la liste
      if (currentIndex >= videoIds.length - 1) {
        console.log('‚ö†Ô∏è getNextVideo - pas de vid√©o suivante dans la liste');
        // R√©cup√©rer le quizId du parcours
        const quizId = courseData.quizId;
        console.log('üìù Quiz ID trouv√©:', quizId);
        return {
          isLastVideo: true,
          quizId
        };
      }
      
      // R√©cup√©rer l'ID de la prochaine vid√©o
      const nextVideoId = videoIds[currentIndex + 1];
      console.log(`üîç getNextVideo - ID de la prochaine vid√©o: ${nextVideoId}`);
      
      // R√©cup√©rer les d√©tails de la prochaine vid√©o
      const nextVideo = await this.getVideoById(nextVideoId);
      
      if (!nextVideo) {
        console.log('‚ö†Ô∏è getNextVideo - d√©tails de la prochaine vid√©o non trouv√©s');
        return null;
      }
      
      console.log(`‚úÖ getNextVideo - Prochaine vid√©o trouv√©e: ${nextVideo.title}`);
      return nextVideo;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la prochaine vid√©o:', error);
      return null;
    }
  },
  
  // M√©thode de fallback pour trouver la prochaine vid√©o par ordre
  async findNextVideoByOrder(courseId: string | undefined, currentVideoId: string): Promise<Video | null> {
    try {
      console.log('üîÑ findNextVideoByOrder - M√©thode de fallback');
      
      if (!courseId) {
        console.log('‚ö†Ô∏è findNextVideoByOrder - courseId non d√©fini');
        return null;
      }
      
      // 1. R√©cup√©rer la vid√©o actuelle pour conna√Ætre son ordre
      const currentVideo = await this.getVideoById(currentVideoId);
      
      if (!currentVideo) {
        console.log('‚ö†Ô∏è findNextVideoByOrder - vid√©o actuelle non trouv√©e');
        return null;
      }
      
      const currentOrder = currentVideo.order || 0;
      console.log(`üîç findNextVideoByOrder - Ordre de la vid√©o actuelle: ${currentOrder}`);
      
      // 2. R√©cup√©rer toutes les vid√©os du parcours
      const videosQuery = query(
        collection(db, VIDEOS_COLLECTION),
        where('courseId', '==', courseId)
      );
      
      const querySnapshot = await getDocs(videosQuery);
      console.log(`üîç findNextVideoByOrder - ${querySnapshot.size} vid√©os trouv√©es pour ce cours`);
      
      if (querySnapshot.empty) {
        console.log('‚ö†Ô∏è findNextVideoByOrder - aucune vid√©o trouv√©e dans ce parcours');
        return null;
      }
      
      // 3. Transformer en tableau d'objets Video avec l'ID comme propri√©t√©
      const videos = querySnapshot.docs.map(doc => {
        const data = doc.data();
        // Ajouter l'ID comme propri√©t√© si ce n'est pas d√©j√† le cas et s'assurer que duree et thumbnail sont pr√©sents
        const videoWithId = { 
          ...data, 
          id: doc.id,
          duree: data.duree || '00:00',
          thumbnail: data.thumbnail || ''
        } as Video;
        
        console.log(`üîç findNextVideoByOrder - Vid√©o trouv√©e: ID=${doc.id}, Titre=${data.title}, Ordre=${data.order || 'non d√©fini'}`);
        console.log(`üîç findNextVideoByOrder - Propri√©t√©s: duree=${videoWithId.duree}, thumbnail=${videoWithId.thumbnail?.substring(0, 30) || 'non disponible'}...`);
        return videoWithId;
      });
      
      // 4. Trier les vid√©os par ordre
      const sortedVideos = videos.sort((a, b) => {
        const orderA = a.order || 0;
        const orderB = b.order || 0;
        return orderA - orderB;
      });
      
      console.log('üîç findNextVideoByOrder - Vid√©os tri√©es:', sortedVideos.map(v => `${v.id}(ordre:${v.order || 0})`).join(', '));
      
      // 5. Chercher la vid√©o avec l'ordre imm√©diatement sup√©rieur √† la vid√©o actuelle
      const nextVideo = sortedVideos.find(video => (video.order || 0) > currentOrder);
      
      if (nextVideo) {
        console.log(`‚úÖ findNextVideoByOrder - Prochaine vid√©o trouv√©e par ordre: ID=${nextVideo.id}, Titre=${nextVideo.title}, Ordre=${nextVideo.order || 0}`);
        return nextVideo;
      }
      
      // 6. Si aucune vid√©o avec un ordre sup√©rieur n'est trouv√©e, essayer par index
      const currentVideoIndex = sortedVideos.findIndex(v => v.id === currentVideoId);
      console.log(`üîç findNextVideoByOrder - Index de la vid√©o actuelle: ${currentVideoIndex}`);
      
      if (currentVideoIndex !== -1 && currentVideoIndex < sortedVideos.length - 1) {
        const nextVideo = sortedVideos[currentVideoIndex + 1];
        console.log(`‚úÖ findNextVideoByOrder - Prochaine vid√©o trouv√©e par index: ID=${nextVideo.id}, Titre=${nextVideo.title}`);
        return nextVideo;
      }
      
      // Aucune vid√©o suivante trouv√©e
      console.log('üîç findNextVideoByOrder - Aucune prochaine vid√©o trouv√©e');
      return null;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la prochaine vid√©o par ordre:', error);
      return null;
    }
  },

  // Observer la prochaine vid√©o d'un cours en temps r√©el
  observeNextVideo(courseId: string | undefined, currentVideoId: string, callback: (nextVideo: Video | LastVideoResult | null) => void): () => void {
    if (!courseId) {
      console.log('‚ÑπÔ∏è observeNextVideo - courseId non d√©fini, retour null');
      callback(null);
      return () => {};
    }

    console.log(`üîç observeNextVideo - Configuration de l'observation pour la prochaine vid√©o du cours ${courseId}, vid√©o actuelle: ${currentVideoId}`);
    
    const courseRef = doc(db, 'parcours', courseId);
    
    const unsubscribe = onSnapshot(
      courseRef,
      async (docSnapshot) => {
        if (!docSnapshot.exists()) {
          console.log('‚ö†Ô∏è observeNextVideo - document de parcours non trouv√©');
          callback(null);
          return;
        }
        
        try {
          const courseData = docSnapshot.data();
          const videoIds = courseData.videoIds || [];
          
          console.log('üîç observeNextVideo - Liste des IDs de vid√©os du parcours mise √† jour:', videoIds);
          
          if (!videoIds.length) {
            console.log('‚ö†Ô∏è observeNextVideo - aucune vid√©o dans ce parcours');
            callback(null);
            return;
          }
          
          // Trouver l'index de la vid√©o actuelle dans la liste
          const currentIndex = videoIds.indexOf(currentVideoId);
          console.log(`üîç observeNextVideo - Index de la vid√©o actuelle: ${currentIndex}`);
          
          if (currentIndex === -1) {
            console.log('‚ö†Ô∏è observeNextVideo - vid√©o actuelle non trouv√©e dans la liste des IDs');
            callback(null);
            return;
          }
          
          // S'il n'y a pas de vid√©o suivante dans la liste
          if (currentIndex >= videoIds.length - 1) {
            console.log('‚ö†Ô∏è observeNextVideo - pas de vid√©o suivante dans la liste');
            // R√©cup√©rer le quizId du parcours
            const quizId = courseData.quizId;
            console.log('üìù Quiz ID trouv√©:', quizId);
            callback({
              isLastVideo: true,
              quizId
            });
            return;
          }
          
          // R√©cup√©rer l'ID de la prochaine vid√©o
          const nextVideoId = videoIds[currentIndex + 1];
          console.log(`üîç observeNextVideo - ID de la prochaine vid√©o: ${nextVideoId}`);
          
          // R√©cup√©rer les d√©tails de la prochaine vid√©o
          const nextVideo = await this.getVideoById(nextVideoId);
          
          if (!nextVideo) {
            console.log('‚ö†Ô∏è observeNextVideo - d√©tails de la prochaine vid√©o non trouv√©s');
            callback(null);
            return;
          }
          
          console.log(`‚úÖ observeNextVideo - Prochaine vid√©o trouv√©e: ${nextVideo.title}`);
          callback(nextVideo);
        } catch (error) {
          console.error('‚ùå observeNextVideo - Erreur lors du traitement:', error);
          callback(null);
        }
      },
      (error) => {
        console.error(`‚ùå observeNextVideo - Erreur lors de l'observation du parcours ${courseId}:`, error);
        callback(null);
      }
    );

    return unsubscribe;
  }
}; 